package flyapp.its_on;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import net.danlew.android.joda.JodaTimeAndroid;


import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.lucasr.twowayview.TwoWayView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;



public class ChallengeMainPage extends Activity {
    LinearLayout myGallery;
    class CustomDateVar{
        DateTime date;
        boolean iscomp;
        boolean ishead;
    }

    private List<CustomDateVar> storedDates;

    private static String LOGIN_URL;

    private static final String TAG_SUCCESS = "success";
    private static final String TAG_DATES = "dates";
    private static final String TAG_TABLENAME = "tablename";
    private static final String TAG_DAY = "day";
    private static final String TAG_ISCOMP = "iscomplete";
    private static final String TAG_MSG = "message";

    Challenge selectedChallenge;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_challenge_main_page);

        LOGIN_URL = getResources().getString(R.string.ipaddress)+ "fillchallenge.php";

        JodaTimeAndroid.init(this);
    }

    @Override
    protected void onResume() {
        // TODO Auto-generated method stub
        super.onResume();

        setTitle("");

        selectedChallenge=ProfileHome.selectedChallenge; //TODO: error handing if null
        storedDates=new ArrayList<CustomDateVar>();

        new LoadChallenge().execute();

    }

    public class DateDispAdapter extends BaseAdapter {


        @Override
        public int getCount() {
            // TODO Auto-generated method stub
            return storedDates.size();
        }

        @Override
        public Object getItem(int arg0) {
            // TODO Auto-generated method stub
            return storedDates.get(arg0);
            //??: what is arg0, arg1....?
        }

        @Override
        public long getItemId(int arg0) {
            // TODO Auto-generated method stub
            return arg0;
        }

        @Override
        public View getView(int arg0, View arg1, ViewGroup arg2) {
            //Q: don't understand what a view is and viewgroup

            final CustomDateVar curItem = storedDates.get(arg0);
            boolean isComp=curItem.iscomp;

            TextView tv_month;
            TextView tv_date;

            if ( !isComp) {
                LayoutInflater inflater = (LayoutInflater) ChallengeMainPage.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                arg1 = inflater.inflate(R.layout.view_challengedates_unfilled, arg2, false);

            }
            else if(isComp)
            {
                LayoutInflater inflater = (LayoutInflater) ChallengeMainPage.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                arg1 = inflater.inflate(R.layout.view_challengedates_filled, arg2, false);
            }

            if(!isComp)
            {
                tv_month = (TextView) arg1.findViewById(R.id.tv_chlgDateMonthUnfilled);
                tv_date = (TextView) arg1.findViewById(R.id.tv_chlgDateUnfilled);
            }
            else
            {
                tv_month = (TextView) arg1.findViewById(R.id.tv_chlgDateMonthFilled);
                tv_date = (TextView) arg1.findViewById(R.id.tv_chlgDateFilled);
            }

            DateTimeFormatter formatter = DateTimeFormat.forPattern("MMM"); // Make sure we use English month names
            String monthText = formatter.print(curItem.date);


            formatter = DateTimeFormat.forPattern("dd");
            String dayText = formatter.print(curItem.date);

            if(curItem.ishead==true)
                tv_month.setText(monthText);
            else
                tv_month.setText("");
            tv_date.setText(dayText);

            return arg1;
        }

        public CustomDateVar getChlgItem(int position)
        {
            return storedDates.get(position);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.challenge_main_page, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }


    //HL: is this no longer needed?
    View insertPhoto(String path){
        Bitmap bm = decodeSampledBitmapFromUri(path, 220, 220);

        LinearLayout layout = new LinearLayout(getApplicationContext());
        layout.setLayoutParams(new ViewGroup.LayoutParams(250, 250));
        layout.setGravity(Gravity.CENTER);

        ImageView imageView = new ImageView(getApplicationContext());
        imageView.setLayoutParams(new ViewGroup.LayoutParams(220, 220));
        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        imageView.setImageBitmap(bm);

        layout.addView(imageView);
        return layout;
    }

    public Bitmap decodeSampledBitmapFromUri(String path, int reqWidth, int reqHeight) {
        Bitmap bm = null;

        // First decode with inJustDecodeBounds=true to check dimensions
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(path, options);

        // Calculate inSampleSize
        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        // Decode bitmap with inSampleSize set
        options.inJustDecodeBounds = false;
        bm = BitmapFactory.decodeFile(path, options);

        return bm;
    }

    public int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height > reqHeight || width > reqWidth) {
            if (width > height) {
                inSampleSize = Math.round((float)height / (float)reqHeight);
            } else {
                inSampleSize = Math.round((float)width / (float)reqWidth);
            }
        }

        return inSampleSize;
    }

    public class LoadChallenge extends AsyncTask<Void, Void, Boolean> {

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }
        @Override
        protected Boolean doInBackground(Void... arg0) {
            int success;
            try {
                List<NameValuePair> params = new ArrayList<NameValuePair>();

                //params.add(new BasicNameValuePair(TAG_ID, Integer.toString(selectedChallenge.getId())));
                params.add(new BasicNameValuePair(TAG_TABLENAME, selectedChallenge.getTableName()));

                Log.d("request!", "starting");

                JSONParser jsonParser = new JSONParser();

                JSONObject json = jsonParser.makeHttpRequest(LOGIN_URL, "POST", params);  //does this POST have to be here? what does it signify?
                Log.d("Register attempt", json.toString());

                // json success tag
                success = json.getInt(TAG_SUCCESS);
                if (success == 1) {
                    Log.d("Register Successful!", json.toString());
                    updateJSONdata();
                    return true;

                } else {
                    Log.d("Register Failed!", json.toString());
                    return false;
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

            return null;

        }

        @Override
        protected void onPostExecute(Boolean result) {
            super.onPostExecute(result);

            ImageView ivChallengeCover=(ImageView) findViewById(R.id.iv_cover);
            TextView tvChallengeName=(TextView) findViewById(R.id.tv_dpChlgName);
            TextView tvChallengeDescription=(TextView) findViewById(R.id.tv_dpChlgDesc);

            ivChallengeCover.setImageBitmap(selectedChallenge.getCoverBitmap());
            tvChallengeName.setText(selectedChallenge.getName());
            tvChallengeDescription.setText(selectedChallenge.getDescription());

            DateDispAdapter aItems=new DateDispAdapter();
            TwoWayView lvTest = (TwoWayView) findViewById(R.id.twv_dateDisp);
            lvTest.setAdapter(aItems);
        }
    }

    public void updateJSONdata() {

        JSONParser jParser = new JSONParser();
        JSONObject json = jParser.getJSONFromUrl(LOGIN_URL);
        JSONArray dates=null;

        try {
            dates= json.getJSONArray(TAG_DATES);
            if (dates != null) {
                for (int i = 0; i < dates.length(); i++) {
                    JSONObject c = dates.getJSONObject(i);

                    CustomDateVar date = createDateVar(c.getString(TAG_DAY), Integer.parseInt(c.getString(TAG_ISCOMP)));
                    if (i == 0)
                        date.ishead = true;
                    storedDates.add(date);
                }
            }
        }
        catch (JSONException e)
        {}

    }

    public CustomDateVar createDateVar(String dateString, int iscomplete)
    {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date date = null;
        DateTime datetime=null;

        try {
            date = format.parse(dateString);

            datetime = new DateTime(date);

        } catch (Exception e) {
            e.printStackTrace();
        }
        CustomDateVar newDate;

        newDate=new CustomDateVar();
        newDate.date=datetime;

        if(iscomplete==1)
            newDate.iscomp=true;
        else
            newDate.iscomp=false;

        if(datetime.getMonthOfYear()!=datetime.minusDays(1).getMonthOfYear())
            newDate.ishead=true;

        return newDate;
    }





}
