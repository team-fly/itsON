package flyapp.its_on;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.ByteArrayBuffer;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import flyapp.its_on.R;

public class NewChallenge extends Activity {

    private class ImageData
    {
        final int id;
        String name="";
        Bitmap image=null;


        ImageData(int id)
        {
            this.id=id;

        }
    }

    private List<ImageData> imageDataCollection = new ArrayList<ImageData>();

    final Calendar myCalendar = Calendar.getInstance();
    private static String LOGIN_URL;
    private static String LOGIN_IMGURL;
    private boolean isImagesLoaded=false;

    List<Bitmap> covers=new ArrayList<Bitmap>();

    //temporary->store image id directly to database
    private int curCoverId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        LOGIN_URL = getResources().getString(R.string.ipaddress) +"addchallenge.php";
        LOGIN_IMGURL = getResources().getString(R.string.ipaddress) +"fillimageurls.php";

        setContentView(R.layout.activity_new_challenge);
        setTitle("Create New Challenge");
        //testing svn
    }


    //look into fixing it later. make thing fill entire layout
    public void RetrieveCategory(View v)
    {
        final EditText editText = (EditText) findViewById(R.id.et_newChlgCgry);

        final Dialog dialog = new Dialog(NewChallenge.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.listitem_category);


        String[] categories = new String[] {"Diet and Health","Fitness", "Happiness", "Relationships", "Productivity", "Academics"};
        final ArrayAdapter categoriesAdptr = new ArrayAdapter<String>(this, R.layout.popup_selectcategory, categories);
        ListView categoryList= (ListView)dialog.findViewById(R.id.lv_popupCtgr);
        categoryList.setAdapter(categoriesAdptr);



        dialog.show();

        categoryList.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
                //HL: showing msg that the challenge is selected
                String item = categoriesAdptr.getItem(arg2).toString();
                editText.setText(item);
                dialog.dismiss();
            }
        });


    }

    //Edit so that later there is only one function for both start and end date
    //Learn how this function works
    public void  RetrieveStartDate(View v)
    {
        final EditText editText = (EditText) findViewById(R.id.et_newChlgStartDate);
        final DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                String myFormat = "yyyy-MM-dd"; //In which you need put here
                SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);

                editText.setText(sdf.format(myCalendar.getTime()));
            }

        };

        new DatePickerDialog(NewChallenge.this, date, myCalendar
                .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                myCalendar.get(Calendar.DAY_OF_MONTH)
        ).show();
    }

    public void  RetrieveEndDate(View v)
    {
        final EditText editText = (EditText) findViewById(R.id.et_newChlgEndDate);
        final DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                String myFormat = "yyyy-MM-dd"; //In which you need put here
                SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);

                editText.setText(sdf.format(myCalendar.getTime()));
            }

        };

        new DatePickerDialog(NewChallenge.this, date, myCalendar
                .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                myCalendar.get(Calendar.DAY_OF_MONTH)
        ).show();
    }

    public void RetrieveChallengeCoverImage(View v)
    {

        new RetrieveImages().execute();
        /*
        final Dialog dialog = new Dialog(NewChallenge.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);

        dialog.setContentView(R.layout.popup_imageselect);


        ImageView upd_image = (ImageView) dialog.findViewById(R.id.iv_testimage);
        //String url = "http://s26.postimg.org/knajbvy1l/cover_1.png";
        String url ="http://s26.postimg.org/oslfxsvtl/cover_1.jpg";

        try {
            Bitmap temp=loadImageFromUrl(url);
        } catch(Exception e) {
            //txtUrl.setText("Error: Exception");
        }
        dialog.show();
        */

    }


    private static final String TAG_POSTS = "data";
    private static final String TAG_URL = "url";
    private static final String TAG_ID = "id";

    private static final String TAG_MESSAGE = "message";
    private static final String TAG_SUCCESS = "success";
    //it's important to note that the message is both in the parent branch of
    //our JSON tree that displays a "Post Available" or a "No Post Available" message,
    //and there is also a message for each individual post, listed under the "posts"
    //category, that displays what the user typed as their message.


    //An array of all of our comments
    private JSONArray mComments = null;

    class RetrieveImages extends AsyncTask<String, String, String> {


        boolean failure = false;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            //dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);

            //dialog.setContentView(R.layout.popup_imageselect);


        }

        @Override
        protected String doInBackground(String... args) {
            int success;
            // Building Parameters
            //HL: do these correspond with the form variable names?
            try {
                if(!isImagesLoaded) {
                    List<String> imageurls = updateImageURLs();

                    for(int i=0; i<imageurls.size(); i++)
                    {
                        covers.add(loadImageFromUrl(imageurls.get(i)));
                    }
                    isImagesLoaded=true;
                }


                return "true";

            }
            catch(Exception e) {
                e.printStackTrace();
                return "bad";

                    //txtUrl.setText("Error: Exception");
            }

        }

        /**
         * After completing background task Dismiss the progress dialog
         * *
         */
        protected void onPostExecute(String file_url) {

            final Dialog dialog = new Dialog(NewChallenge.this);
            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);

            dialog.setContentView(R.layout.popup_imageselect);


            GridView gridView = (GridView)dialog.findViewById(R.id.gridview);
            gridView.setAdapter(new GridImageView(dialog.getContext()));
            dialog.show();

            gridView.setOnItemClickListener(new AdapterView.OnItemClickListener()
            {
                public void onItemClick(AdapterView<?> parent, View v, int position, long id)
                {
                    //curCoverId=imageDataCollection.get(position).id;    this is actually the correct way. look into fixing it
                    curCoverId=position;

                    dialog.dismiss();
                }
            });

            ImageView iconimage=(ImageView) findViewById(R.id.iv_newChlgIcon);
            iconimage.setImageBitmap(covers.get(curCoverId));

            //upd_image.setImageBitmap(temp);


            // dismiss the dialog once product deleted
            //dialog.show();
            /*
            if (file_url != null) {
                Toast.makeText(NewChallenge.this, file_url, Toast.LENGTH_SHORT).show();
            }
            */
        }
    }

    public List<String> updateImageURLs() {


        List<String> imageurls=new ArrayList<String>();

        JSONParser jParser = new JSONParser();

        JSONObject json = jParser.getJSONFromUrl(LOGIN_IMGURL);

        try {

            mComments = json.getJSONArray(TAG_POSTS);

            for (int i = 0; i < mComments.length(); i++) {
                JSONObject c = mComments.getJSONObject(i);

                imageDataCollection.add(new ImageData(Integer.parseInt(c.getString(TAG_ID))));
                imageurls.add(c.getString(TAG_URL));

            }
            return imageurls;

        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static final int BUFFER_IO_SIZE = 8000;

    private Bitmap loadImageFromUrl(final String url) {
        try {
            // Addresses bug in SDK :
            // http://groups.google.com/group/android-developers/browse_thread/thread/4ed17d7e48899b26/
            BufferedInputStream bis = new BufferedInputStream(new URL(url).openStream(), BUFFER_IO_SIZE);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(baos, BUFFER_IO_SIZE);
            copy(bis, bos);
            bos.flush();
            return  BitmapFactory.decodeByteArray(baos.toByteArray(), 0, baos.size());
        } catch (IOException e) {
            // handle it properly
            return null;
        }
    }

    private void copy(final InputStream bis, final OutputStream baos) throws IOException {
        byte[] buf = new byte[256];
        int l;
        while ((l = bis.read(buf)) >= 0) baos.write(buf, 0, l);
    }

    /*
    private static int RESULT_LOAD_IMAGE = 1;

    public void RetrieveIconImage(View v)
    {
        Intent i = new Intent(Intent.ACTION_PICK,
                android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);

        startActivityForResult(i, RESULT_LOAD_IMAGE);

    }


    //HL: might take this off, dunno what it is
    //for getting image from your image album. will save this for later
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };

            Cursor cursor = getContentResolver().query(selectedImage,
                    filePathColumn, null, null, null);
            cursor.moveToFirst();

            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();

            ImageView imageView = (ImageView) findViewById(R.id.iv_newChlgIcon);
            imageView.setImageBitmap(BitmapFactory.decodeFile(picturePath));
        }
    }
    */

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.new_challenge, menu);
        return true;
    }



    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public void NewChallengeAdd(View V)
    {
        new AttemptAddChallenge().execute();
    }


    private EditText etName, etDescription, etCategory, etStart_date, etEnd_date;

    // url to get all products list



    JSONParser jsonParser = new JSONParser();

    class AttemptAddChallenge extends AsyncTask<String, String, String> {

        /**
         * Before starting background thread Show Progress Dialog
         */
        boolean failure = false;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... args) {
            // TODO Auto-generated method stub
            // Check for success tag
            int success;

            etName = (EditText) findViewById(R.id.et_newChlgName);
            etDescription = (EditText) findViewById(R.id.et_newChlgDesc);
            etCategory = (EditText) findViewById(R.id.et_newChlgCgry);
            etStart_date = (EditText) findViewById(R.id.et_newChlgStartDate);
            etEnd_date= (EditText) findViewById(R.id.et_newChlgEndDate);

            String name = etName.getText().toString();
            String description = etDescription.getText().toString();
            String category = etCategory.getText().toString();
            String start_date = etStart_date.getText().toString();
            String end_date = etEnd_date.getText().toString();
            String username=getResources().getString(R.string.username);
            String image_id =Integer.toString(curCoverId);



            try {

                //HL: inserting new challenge in to challenge database
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair("name", name));
                params.add(new BasicNameValuePair("description", description));
                params.add(new BasicNameValuePair("category", category));
                params.add(new BasicNameValuePair("start_date", start_date));
                params.add(new BasicNameValuePair("end_date", end_date));
                params.add(new BasicNameValuePair("username", username ));
                params.add(new BasicNameValuePair ("image_id", image_id));

                Log.d("request!", "starting");
                // getting product details by making HTTP request
                JSONObject json = jsonParser.makeHttpRequest(LOGIN_URL, "POST", params);

                // check your log for json response
                Log.d("Add new Challenge attempt", json.toString());

                //HL: creating a table for updates



                // json success tag
                success = json.getInt(TAG_SUCCESS);
                if (success == 1) {
                    Log.d("Register Successful!", json.toString());

                    Intent intent = new Intent();
                    setResult(RESULT_OK, intent);
                    finish();
                    return json.getString(TAG_MESSAGE);

                } else {
                    Log.d("Register Failed!", json.toString());
                    return json.getString(TAG_MESSAGE);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

            return null;

        }

        /**
         * After completing background task Dismiss the progress dialog
         * *
         */
        protected void onPostExecute(String file_url) {
            // dismiss the dialog once product deleted

            if (file_url != null) {
                Toast.makeText(NewChallenge.this, file_url, Toast.LENGTH_SHORT).show();
            }

        }
    }


    private class GridImageView extends BaseAdapter
    {
        private LayoutInflater inflater;

        public GridImageView(Context context)
        {
            inflater = LayoutInflater.from(context);

            for(int i=0; i<covers.size(); i++)
            {
                //might have error here later. add safety
                imageDataCollection.get(i).image=covers.get(i);
                imageDataCollection.get(i).name="Image "+Integer.toString(i);
            }
        }

        @Override
        public int getCount() {
            return imageDataCollection.size();
        }

        @Override
        public Object getItem(int i)
        {
            return imageDataCollection.get(i);
        }


        @Override
        public long getItemId(int i)
        {
            return imageDataCollection.get(i).id;
        }


        @Override
        public View getView(int i, View view, ViewGroup viewGroup)
        {
            View v = view;
            ImageView picture;
            TextView name;

            if(v == null)
            {
                v = inflater.inflate(R.layout.griditem_image, viewGroup, false);
                v.setTag(R.id.picture, v.findViewById(R.id.picture));
                v.setTag(R.id.text, v.findViewById(R.id.text));
            }

            picture = (ImageView)v.getTag(R.id.picture);
            name = (TextView)v.getTag(R.id.text);

            picture.setImageBitmap(covers.get(i));
            name.setText("Image" +i);

            return v;
        }


    }

}
